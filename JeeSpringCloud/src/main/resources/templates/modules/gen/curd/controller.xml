<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>src/main/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
	<fileName>${ClassName}Controller.java</fileName>
	<content><![CDATA[
/**
 * * Copyright &copy; 2015-2020 <a href="https://gitee.com/JeeHuangBingGui/JeeSpring">JeeSpring</a> All rights reserved..
 */
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.google.common.collect.Lists;
import com.jeespring.common.utils.DateUtils;
import com.jeespring.common.config.Global;
import com.jeespring.common.persistence.Page;
import com.jeespring.common.web.AbstractBaseController;
import com.jeespring.common.utils.StringUtils;
import com.jeespring.common.utils.excel.ExportExcel;
import com.jeespring.common.utils.excel.ImportExcel;
import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;
/**
 * ${functionName}Controller
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Controller
@RequestMapping(value = "${r"${adminPath}"}/${urlPrefix}")
public class ${ClassName}Controller extends AbstractBaseController {

	@Autowired
	private ${ClassName}Service ${className}Service;
	
	@ModelAttribute
	public ${ClassName} get(@RequestParam(required=false) String id) {
		${ClassName} entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = ${className}Service.getCache(id);
			//entity = ${className}Service.get(id);
		}
		if (entity == null){
			entity = new ${ClassName}();
		}
		return entity;
	}

	/**
	 * ${functionNameSimple}统计页面
	 */
	@RequiresPermissions("${permissionPrefix}:total")
	@RequestMapping(value = {"total"})
	public String totalView(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {
		total(${className},request,response,model);
		return "${lastPackageName}/${viewPrefix}Total";
	}
	private void total(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {
			if(StringUtils.isEmpty(${className}.getTotalType())){
			${className}.setTotalType("%Y-%m-%d");
		}
		//X轴的数据
		List<String> xAxisData= new ArrayList<String>();
		//Y轴的数据
		Map<String,List<Double>> yAxisData = new HashMap<String,List<Double>>();
		List<Double> countList = new ArrayList<Double>();
		List<Double> sumList = new ArrayList<Double>();
		<#list table.columnList as c>
			<#if c.jdbcType?? && (c.jdbcType == "int(11)" || c.jdbcType == "decimal(10,3)") && table.tableType!="2" && c.name?index_of("_id") == -1 && c.name?index_of("_type") == -1>
		List<Double> sum${c.javaField?cap_first}List = new ArrayList<Double>();
			</#if>
		</#list>
		if(${className}.getOrderBy()==""){
			${className}.setOrderBy("totalDate");
		}
		List<${ClassName}> list = ${className}Service.totalCache(${className});
		//List<${ClassName}> list = ${className}Service.total(${className});
		model.addAttribute("list", list);
		for(${ClassName} ${className}Item:list){
			//x轴数据
			xAxisData.add( ${className}Item.getTotalDate());
			countList.add(Double.valueOf(${className}Item.getTotalCount()));
			<#list table.columnList as c>
				<#if c.jdbcType?? && (c.jdbcType == "int(11)" || c.jdbcType == "decimal(10,3)") && table.tableType!="2" && c.name?index_of("_id") == -1 && c.name?index_of("_type") == -1>
			if(${className}Item.getSum${c.javaField?cap_first}()!=null)
				sum${c.javaField?cap_first}List.add(Double.valueOf(${className}Item.getSum${c.javaField?cap_first}()));
				</#if>
			</#list>
		}
		yAxisData.put("数量", countList);
		<#list table.columnList as c>
			<#if c.jdbcType?? && (c.jdbcType == "int(11)" || c.jdbcType == "decimal(10,3)") && table.tableType!="2" && c.name?index_of("_id") == -1 && c.name?index_of("_type") == -1>
		yAxisData.put("${c.comments}", sum${c.javaField?cap_first}List);
			</#if>
		</#list>
	    request.setAttribute("xAxisData", xAxisData);
		request.setAttribute("yAxisData", yAxisData);
		model.addAttribute("sumTotalCount", list.stream().mapToInt(${ClassName}::getTotalCount).sum());
		<#list table.columnList as c>
			<#if c.jdbcType?? && (c.jdbcType == "int(11)" || c.jdbcType == "decimal(10,3)") && table.tableType!="2" && c.name?index_of("_id") == -1 && c.name?index_of("_type") == -1>
		model.addAttribute("sum${c.javaField?cap_first}", list.stream().mapToDouble(${ClassName}::getSum${c.javaField?cap_first}).sum());
			</#if>
		</#list>

		//饼图数据
		Map<String,Object> orientData= new HashMap<String,Object>();
		<#list table.columnList as c>
				<#if c.jdbcType?? && (c.jdbcType == "int(11)" || c.jdbcType == "decimal(10,3)") && table.tableType!="2" && c.name?index_of("_id") == -1 && c.name?index_of("_type") == -1>
		Map<String,Object> orientDataSum${c.javaField?cap_first}= new HashMap<String,Object>();
				</#if>
			</#list>
		for(${ClassName} ${className}Item:list){
			orientData.put(${className}Item.getTotalDate(), ${className}Item.getTotalCount());
			<#list table.columnList as c>
				<#if c.jdbcType?? && (c.jdbcType == "int(11)" || c.jdbcType == "decimal(10,3)") && table.tableType!="2" && c.name?index_of("_id") == -1 && c.name?index_of("_type") == -1>
			orientDataSum${c.javaField?cap_first}.put(${className}Item.getTotalDate(), Double.valueOf(${className}Item.getSum${c.javaField?cap_first}()));
				</#if>
			</#list>
		}
		model.addAttribute("orientData", orientData);
		<#list table.columnList as c>
				<#if c.jdbcType?? && (c.jdbcType == "int(11)" || c.jdbcType == "decimal(10,3)") && table.tableType!="2" && c.name?index_of("_id") == -1 && c.name?index_of("_type") == -1>
		model.addAttribute("orientDataSum${c.javaField?cap_first}", orientDataSum${c.javaField?cap_first});
				</#if>
		</#list>
	}
	@RequiresPermissions("${permissionPrefix}:total")
	@RequestMapping(value = {"totalMap"})
	public String totalMap(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {
		if(StringUtils.isEmpty(${className}.getTotalType())){
			${className}.setTotalType("%Y-%m-%d");
		}
		List<${ClassName}> list = ${className}Service.totalCache(${className});
		//List<${ClassName}> list = ${className}Service.total(${className});
		model.addAttribute("sumTotalCount", list.stream().mapToInt(${ClassName}::getTotalCount).sum());
		<#list table.columnList as c>
			<#if c.jdbcType?? && (c.jdbcType == "int(11)" || c.jdbcType == "decimal(10,3)") && table.tableType!="2" && c.name?index_of("_id") == -1 && c.name?index_of("_type") == -1>
		model.addAttribute("sum${c.javaField?cap_first}", list.stream().mapToDouble(${ClassName}::getSum${c.javaField?cap_first}).sum());
			</#if>
		</#list>
		model.addAttribute("list", list);
		return "${lastPackageName}/${viewPrefix}TotalMap";
	}

	/**
	 * ${functionNameSimple}列表页面
	 */
	@RequiresPermissions("${permissionPrefix}:list")
	@RequestMapping(value = {"list", ""})
	public String list(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<${ClassName}> page = ${className}Service.findPageCache(new Page<${ClassName}>(request, response), ${className});
		//Page<${ClassName}> page = ${className}Service.findPage(new Page<${ClassName}>(request, response), ${className});
		model.addAttribute("page", page);
		${className}.setOrderBy("totalDate");
		total(${className},request,response,model);
		return "${lastPackageName}/${viewPrefix}List";
	}

	/**
	 * ${functionNameSimple}列表页面
	 */
	@RequiresPermissions("${permissionPrefix}:list")
	@RequestMapping(value = {"listVue"})
	public String listVue(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<${ClassName}> page = ${className}Service.findPageCache(new Page<${ClassName}>(request, response), ${className});
		//Page<${ClassName}> page = ${className}Service.findPage(new Page<${ClassName}>(request, response), ${className});
		model.addAttribute("page", page);
		return "${lastPackageName}/${viewPrefix}ListVue";
	}

	/**
	 * ${functionNameSimple}列表页面
	 */
	//RequiresPermissions("${permissionPrefix}:select")
	@RequestMapping(value = {"select"})
	public String select(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<${ClassName}> page = ${className}Service.findPageCache(new Page<${ClassName}>(request, response), ${className});
		//Page<${ClassName}> page = ${className}Service.findPage(new Page<${ClassName}>(request, response), ${className});
		model.addAttribute("page", page);
		return "${lastPackageName}/${viewPrefix}Select";
	}

	/**
	 * 查看，增加，编辑${functionNameSimple}表单页面
	 */
	@RequiresPermissions(value={"${permissionPrefix}:view","${permissionPrefix}:add","${permissionPrefix}:edit"},logical=Logical.OR)
	@RequestMapping(value = "form")
	public String form(${ClassName} ${className}, Model model, HttpServletRequest request, HttpServletResponse response) {
		model.addAttribute("action", request.getParameter("action"));
		model.addAttribute("${className}", ${className});
		if(request.getParameter("ViewFormType")!=null && request.getParameter("ViewFormType").equals("FormTwo"))
			return "${lastPackageName}/${viewPrefix}FormTwo";
		return "${lastPackageName}/${viewPrefix}Form";
	}

	/**
	 * 保存${functionNameSimple}
	 */
	@RequiresPermissions(value={"${permissionPrefix}:add","${permissionPrefix}:edit"},logical=Logical.OR)
	@RequestMapping(value = "save")
	public String save(${ClassName} ${className}, Model model, RedirectAttributes redirectAttributes, HttpServletRequest request, HttpServletResponse response) {
		if (!beanValidator(model, ${className})){
			return form(${className}, model,request,response);
		}
		${className}Service.save(${className});
		addMessage(redirectAttributes, "保存${functionNameSimple}成功");
		return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage";
	}

	/**
	 * 删除${functionNameSimple}
	 */
	@RequiresPermissions("${permissionPrefix}:del")
	@RequestMapping(value = "delete")
	public String delete(${ClassName} ${className}, RedirectAttributes redirectAttributes) {
		${className}Service.delete(${className});
		addMessage(redirectAttributes, "删除${functionNameSimple}成功");
		return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage";
	}

	/**
	 * 删除${functionNameSimple}（逻辑删除，更新del_flag字段为1,在表包含字段del_flag时，可以调用此方法，将数据隐藏）
	 */
	@RequiresPermissions(value={"${permissionPrefix}:del","${permissionPrefix}:delByLogic"},logical=Logical.OR)
	@RequestMapping(value = "deleteByLogic")
	public String deleteByLogic(${ClassName} ${className}, RedirectAttributes redirectAttributes) {
		${className}Service.deleteByLogic(${className});
		addMessage(redirectAttributes, "逻辑删除${functionNameSimple}成功");
		return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage";
	}

	/**
	 * 批量删除${functionNameSimple}
	 */
	@RequiresPermissions("${permissionPrefix}:del")
	@RequestMapping(value = "deleteAll")
	public String deleteAll(String ids, RedirectAttributes redirectAttributes) {
		String idArray[] =ids.split(",");
		for(String id : idArray){
			${className}Service.delete(${className}Service.get(id));
		}
		addMessage(redirectAttributes, "删除${functionNameSimple}成功");
		return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage";
	}

	/**
	 * 批量删除${functionNameSimple}（逻辑删除，更新del_flag字段为1,在表包含字段del_flag时，可以调用此方法，将数据隐藏）
	 */
	@RequiresPermissions(value={"${permissionPrefix}:del","${permissionPrefix}:delByLogic"},logical=Logical.OR)
	@RequestMapping(value = "deleteAllByLogic")
	public String deleteAllByLogic(String ids, RedirectAttributes redirectAttributes) {
		String idArray[] =ids.split(",");
		for(String id : idArray){
			${className}Service.deleteByLogic(${className}Service.get(id));
		}
		addMessage(redirectAttributes, "删除${functionNameSimple}成功");
		return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage";
	}

	/**
	 * 导出excel文件
	 */
	@RequiresPermissions("${permissionPrefix}:export")
    @RequestMapping(value = "export", method=RequestMethod.POST)
    public String exportFile(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
            String fileName = "${functionNameSimple}"+DateUtils.getDate("yyyyMMddHHmmss")+".xlsx";
            Page<${ClassName}> page = ${className}Service.findPage(new Page<${ClassName}>(request, response, -1), ${className});
    		new ExportExcel("${functionNameSimple}", ${ClassName}.class).setDataList(page.getList()).write(response, fileName).dispose();
    		return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导出${functionNameSimple}记录失败！失败信息："+e.getMessage());
		}
		return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage";
    }

	/**
	 * 导入Excel数据

	 */
	@RequiresPermissions("${permissionPrefix}:import")
    @RequestMapping(value = "import", method=RequestMethod.POST)
    public String importFile(MultipartFile file, RedirectAttributes redirectAttributes) {
		try {
			int successNum = 0;
			ImportExcel ei = new ImportExcel(file, 1, 0);
			List<${ClassName}> list = ei.getDataList(${ClassName}.class);
			for (${ClassName} ${className} : list){
				${className}Service.save(${className});
			}
			addMessage(redirectAttributes, "已成功导入 "+successNum+" 条${functionNameSimple}记录");
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入${functionNameSimple}失败！失败信息："+e.getMessage());
		}
		return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage";
    }
	
	/**
	 * 下载导入${functionNameSimple}数据模板
	 */
	@RequiresPermissions("${permissionPrefix}:import")
    @RequestMapping(value = "import/template")
    public String importFileTemplate(HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
            String fileName = "${functionNameSimple}数据导入模板.xlsx";
    		List<${ClassName}> list = Lists.newArrayList(); 
    		new ExportExcel("${functionNameSimple}数据", ${ClassName}.class, 1).setDataList(list).write(response, fileName).dispose();
    		return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入模板下载失败！失败信息："+e.getMessage());
		}
		return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage";
    }
	

}]]>
	</content>
</template>