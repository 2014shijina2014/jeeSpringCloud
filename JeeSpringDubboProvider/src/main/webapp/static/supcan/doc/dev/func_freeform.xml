<?xml version='1.0' encoding='utf-8' ?>
<functions>
<category name="基本">
	<function name="Build">
		<usage>根据XML描述文件创建Freeform</usage>
		<para>XML所在的URL(相对或绝对)，或者直接就是XML大串</para>
		<return>1 - 成功; 空串 - 失败(将自动弹出失败页面)</return>
	</function>
	<function name="Load(含义1)">
		<usage>加载数据</usage>
		<para>XML/JSON数据的URL(相对或绝对)、或XML/JSON大串、或类似"prop1=value1; prop2=value2; ..."的属性串</para>
		<para>可选，格式为：asNewRow=[true/false];useLast=[true/false];method=[?], 其含义分别为：&lt;br&gt;
&lt;b&gt;asNewRow (或asNew)&lt;/b&gt;: 默认false。 如果为true，表示加载后仍作为新增的行，并且当加载到的数据条项少于XML描述文件的条项数时，用defaultValue初始数据;&lt;br&gt;
&lt;b&gt;useLast&lt;/b&gt;: 当加载到的数据条项少于XML描述文件的条项数时，是否用上次输入中遗留的数值, 如果是false则全部清空，默认false;&lt;br&gt;
&lt;b&gt;method&lt;/b&gt; - http的发送方法，为Get / PostEncodeURI / Post，默认是Get.  如果为PostEncodeURI，则自动将URL中问号(?)后面的部分移到http body中，并对文字作EncodeURI转码处理； 如果是Post，则不作转码处理.&lt;br&gt;
		</para>
		<return>1 - 成功; 空串 - 失败(将自动弹出失败页面)</return>
		<example>AF.func("load", "{id:kk203, price:203.22, prov: 501}");　 //JSON串&lt;br&gt;
AF.func("load", url + "\r\n asNewRow=true; useLast=true");　 //使用了参数2
		</example>
	</function>
	<function name="BindAsMaster">
		<usage>共享Treelist加载的XML/JSON数据</usage>
		<para>Treelist的句柄</para>
		<para>需分享的XML节点名</para>
		<illu>参见演示页: 8.有表头表体的表单(1)</illu>
	</function>
	<function name="GetProp">
		<usage>取得属性</usage>
		<detail>取得 XML文档中的 Properties 和 Properties \ BackGround 中的属性的值</detail>
		<para>属性名, 包括Properties中的自定义属性</para>
		<return>属性的值</return>
	</function>
	<function name="SetProp">
		<usage>更改属性</usage>
		<detail>更改 XML文档中的 Properties 和 Properties \ BackGround 中的属性的值</detail>
		<para>属性名, 包括Properties中的自定义属性</para>
		<para>属性的值</para>
		<illu>参见演示页: 6.动态更改属性(1)、18.炫酷ImageFlow(图像流)控件</illu>
	</function>
	<function name="GetHandle">
		<usage>取得Freeform或其它内部对象的句柄</usage>
		<detail>取得当前freeform、或内部非模式对话框、或Validation、或下拉的句柄</detail>
		<para>可以为:&lt;br&gt;
&lt;b&gt;空串(无参数)&lt;/b&gt; - 取当前Freeform的句柄，常用于Export、GetChanged、GetChangedXML函数;&lt;br&gt;
&lt;b&gt;innerDialog&lt;/b&gt; - 取内部非模式对话框的Freeform句柄;&lt;br&gt;
&lt;b&gt;Validation&lt;/b&gt; - 取Validation的句柄, 常用于全局函数动态存取Validation;&lt;br&gt;
&lt;b&gt;某下拉 Llist 控件的ID&lt;/b&gt; - 取得某下拉 Llist 的句柄，也包括下拉字典型的EditWithButton. 操控下拉List的内容请参见“全局函数”;&lt;br&gt;
&lt;b&gt;某下拉 TreeLlist 控件的ID&lt;/b&gt; - 取得某下拉Treelist控件的Treelist的句柄，操控下拉TreeList的内容请参见“扩展函数”;&lt;br&gt;
</para>
		<return>整数串</return>
		<illu>参见演示页: 8.有表头表体的表单(1)、5.事件、按钮、菜单、工具条</illu>
	</function>

	<function name="Recover">
		<usage>将数据恢复到输入前的初始状态</usage>
		<memo>1.如果执行了Load( )， 那么这个“初始状态”就变成了Load( )后数据的状态;&lt;br&gt;
2.如果执行了ResetChanged( )， 那么这个“初始状态”就变成了当前数据的状态;
		</memo>
	</function>
	<function name="GetObjectId">
		<usage>取得第n个对象(Object)的ID</usage>
		<detail>或GetObjId, 取得第n个对象(Object)的ID</detail>
		<para>顺序号，从0开始计数&lt;br&gt;备注：没有ID的Object将不参与计数</para>
		<return>ID，空串表示已经到达末尾</return>
	</function>
	<function name="GetObjectIds">
		<usage>取得全部或部分对象(Object)的ID</usage>
		<detail>或GetObjIds, 取得全部或部分对象(Object)的ID</detail>
		<para>可选，可以是某种对象类型，例如 input、text、rect等等. 默认是所有类型</para>
		<return>逗号分隔的ID</return>
	</function>
	<function name="AddObject">
		<usage>动态创建Object</usage>
		<para>Object的类型，如Input、Line、image</para>
		<para>属性串，例如"x=20;y=33;type=button;text=确认"</para>
		<para>可选，表示插入位置，可以是插入处的id值，默认为空(表示从末尾添加)</para>
		<illu>参见演示页: 6.动态更改属性(1)、7.动态更改属性(2)、18.炫酷ImageFlow(图像流)控件</illu>
	</function>
	<function name="DeleteObject">
		<usage>动态删除Object</usage>
		<para>Object的ID，可以包含多个ID一起删除，相互以逗号分隔</para>
		<memo>TableLayout是无法被删除的</memo>
		<illu>参见演示页: 6.动态更改属性(1)</illu>
	</function>
</category>

<category name="Object" for="objects">
	<function name="GetObjectType">
		<usage>取得某对象的类型</usage>
		<detail>或GetObjType, 取得某对象的类型</detail>
		<para>Object的ID</para>
		<return>如Input、Text、Line、Image等</return>
	</function>
	<function name="GetObjectProp(用途1)">
		<usage>取得某对象的属性</usage>
		<detail>或GetObjProp, 取得XML中某Object(如Input、Line、image等)的属性, 也可以是自定义属性</detail>
		<para>Object的ID</para>
		<para>属性名，请参见Freeform的XML文件文档规范</para>
		<return>属性的值</return>
	</function>
	<function name="SetObjectProp(用途1)">
		<usage>更改某对象的属性</usage>
		<detail>或SetObjProp, 动态更改XML中某Object(如Input、Line、image等)的属性, 也可以是自定义属性</detail>
		<para>Object的ID，可以包含多个ID一起更改，相互以逗号分隔</para>
		<para>属性名，请参见Freeform的XML文件文档规范</para>
		<para>内容</para>
		<para>可选，当Object是Pager(分页器)、参数2是dataURL属性时，此处允许书写例如这样的选项串: &lt;br&gt; 
　　mode=asynch; isResetPage=true&lt;br&gt;其中 mode=asych 表示要求以异步加载数据; isResetPagge=true 表示重置当前页(将当前页转成第一页).</para>
		<memo>1.少数属性如控件类型、id、type、droplistid是无法修改的;&lt;br&gt;
2.如果是异步加载数据，后继的js不应该调用Treelist的函数;
</memo>
		<return>1/0 - 成功/失败</return>
		<illu>参见演示页: 18.炫酷ImageFlow(图像流)控件</illu>
	</function>
</category>

<category name="tableLayout" for="objects.tablelayout">
	<function name="GetObjectProp(用途2)">
		<usage>取得某TableLayout中某行(TR)、某列(Col)的属性</usage>
		<detail>或GetObjProp, 取得XML中某TableLayout的某行(TR)、某列(Col)的属性</detail>
		<para>TableLayout的ID</para>
		<para>行或列的ID，如果是行，ID前必须加"TR."；如果是列，ID前必须加"col."</para>
		<para>属性名，有visible、height(仅用于行)、width(仅用于列)</para>
		<return>属性的值</return>
	</function>
	<function name="SetObjectProp(用途2)">
		<usage>更改某TableLayout中某行(TR)、某列(Col)的属性</usage>
		<detail>或SetObjProp, 动态更改XML中TableLayout中某行(TR)、某列(Col)的属性</detail>
		<para>TableLayout的ID</para>
		<para>行或列的ID，如果是行，ID前必须加"TR."；如果是列，ID前必须加"col."</para>
		<para>属性名，有visible、height(仅用于行)、width(仅用于列)</para>
		<para>内容</para>
		<return>1/0 - 成功/失败</return>
	</function>
</category>

<category name="下拉资源" for="droplists">
	<function name="AddDroplist">
		<usage>增加下拉字典资源</usage>
		<detail>动态增加下拉资源(Droplists\Droplist)</detail>
		<para>可包含id、treelistURL、dataURL等6个属性，以“;”分隔。 例如"id=cus;treelistURL=cus.xml;dataURL=http://www.abcde.com/aa/aa"</para>
		<return>1 - 成功; 空串 - 失败(id为空或重复)</return>
		<example>AF.func("AddDroplist", "id=customer;treelistURL=customer.xml;DataCol=id;DisplayCol=name");</example>
		<illu>参见演示页: 24.动态更改属性</illu>
	</function>
	<function name="SetDroplistProp">
		<usage>更改下拉内容属性</usage>
		<detail>动态更改XML中某 Droplist 的属性</detail>
		<para>Droplist的ID, 或者是Input控件的ID</para>
		<para>属性名</para>
		<para>内容</para>
		<memo>1.更改dataURL相当于是重新加载数据，其内容可以是绝对或相对URL(注意：是相对于XML描述文件，而不是页面)，也可以是XML/JSON大串，且对type为Droplist、 DropTreelist的Input均能生效;&lt;br&gt;
2.若treelistURL内容是相对URL，那么是相对于该XML描述文件的&lt;br&gt;
3.id是无法修改的</memo>
		<example>AF.func("SetDroplistProp", "sex \r\n dataURL \r\n &amp;lt;items&amp;gt;&amp;lt;item key=1&amp;gt;男&amp;lt;/item&amp;gt;&amp;lt;item key=2&amp;gt;女&amp;lt;/item&amp;gt;&amp;lt;/items&amp;gt;");</example>
	</function>
</category>

<category name="Input控件" for="objects.input">
	<function name="GetValue">
		<usage>取得某Input控件的值</usage>
		<para>Input控件的ID</para>
		<return>串</return>
		<memo>如果是RadioButton，参数可以是GroupID，这样返回值就是所选RadioButton的SelectValue.</memo>
		<illu>参见演示页: 4.关联下拉、5.事件、按钮、菜单、工具条、14.辅助Treelist输入(1)</illu>
	</function>
	<function name="SetValue">
		<usage>置某Input控件的值</usage>
		<para>Input控件的ID</para>
		<para>值串</para>
		<illu>参见演示页: 14.辅助Treelist输入(1)、18.炫酷ImageFlow(图像流)控件</illu>
		<memo>如果是RadioButton，参数1可以是GroupID，参数2则为所需的SelectValue.&lt;br&gt;&lt;br&gt;
&lt;font color=red&gt;严重警告：&lt;/font&gt;参数之间不得留有多余空格，否则结果将不是你所期望的，例如：&lt;br&gt;　　AF.func("SetCellData", "city \r\n   "+ vCity);　　//执行结果是左侧有多余空格</memo>
		</function>
	<function name="GetText">
		<usage>取得某控件的显示的串</usage>
		<para>Input控件的ID</para>
		<return>串</return>
	</function>
	<function name="SetText">
		<usage>置某控件的显示文字</usage>
		<para>Input控件的ID</para>
		<para>串</para>
		<memo>常用于和Droplist绑定的EditWithButton的显示值，否则和SetValue( )效果一样.</memo>
	</function>
	<function name="SetValueText">
		<usage>同时设定value-text键值对</usage>
		<detail>增加一个value-text键值对，并应用到当前Input，用于设置了textId的input</detail>
		<para>Input控件的ID</para>
		<para>Value串</para>
		<para>Text串</para>
		<memo>仅用于Text、Edit、EditWithButton.</memo>
	</function>
	<function name="SelectCell">
		<usage>切换焦点</usage>
		<para>id，如果id为空则自动取第一个可编辑的id</para>
		<return>1-成功, 0-失败</return>
		<illu>参见演示页: 8.有表头表体的表单(1)</illu>
	</function>
</category>

<category name="下拉List&lt;br&gt;的Input控件" for="objects.input.droplist,objects.input.editabledroplist">
	<function name="GetDroplistIndex">
		<usage>取得某下拉List的当前选中行顺序号</usage>
		<para>Input控件的ID</para>
		<return>下拉列表的当前选中行, 从0开始计数</return>
		<memo>一般用于非排序的下拉List</memo>
	</function>
	<function name="SetDroplistIndex">
		<usage>选中下拉List中的某行</usage>
		<para>Input控件的ID</para>
		<para>行号(下拉列表中的顺序号, 从0开始计数)</para>
		<return>1 / 0 - 成功 / 失败</return>
		<memo>一般用于非排序的下拉List</memo>
	</function>
</category>

<category name="下拉Treelist&lt;br&gt;的Input控件" for="objects.input.droptreelist,objects.input.editabledroptreelist">
	<function name="Refresh(用途1)">
		<usage>刷新某下拉Input控件的Treelist</usage>
		<para>Input控件的ID</para>
	</function>
	<function name="Load(含义2)">
		<usage>为某下拉Input控件的Treelist加载数据</usage>
		<para>Input控件的ID</para>
		<para>数据的URL</para>
	</function>
	<function name="Filter">
		<usage>过滤某下拉Input控件的Treelist</usage>
		<para>Input控件的ID</para>
		<para>过滤表达式, 请参见&lt;a href="pub.htm#Tag601" target=_blank&gt;“公共内容\表达式”&lt;/a&gt;</para>
		<illu>参见演示页: 4.关联下拉</illu>
	</function>
	<function name="BuildTreelist">
		<usage>重新创建某下拉Input控件的Treelist</usage>
		<para>Input控件的ID</para>
		<para>URL</para>
		<illu>参见演示页: 4.关联下拉</illu>
	</function>
</category>

<category name="Upload(文件上传)&lt;br&gt;的Input控件" for="objects.input.upload">
	<function name="SetFiles">
		<usage>限制上传文件个数</usage>
		<para>Input控件的ID</para>
		<para>数字，0表示无限制</para>
	</function>
	<function name="SetFileTypes">
		<usage>限制文件类型</usage>
		<para>Input控件的ID</para>
		<para>为文件后缀，后缀间以逗号分隔，如"bmp,jpg,png"。 后缀也可以是星号(*)，例如"bmp,jpg, *"，带星号表示允许选任何文件，前面的后缀只是起引导作用.</para>
	</function>
	<function name="SetFileMaxKb">
		<usage>限制单个文件长度</usage>
		<para>Input控件的ID</para>
		<para>数字，单位为KB，0表示不限制</para>
	</function>
	<function name="SetPictureMaxSize">
		<usage>限制图片文件尺寸</usage>
		<para>Input控件的ID</para>
		<para>2个数字，以逗号分隔，分别表示横向/纵向的像素数，0表示不限制.&lt;br&gt;备注：只能辨认后缀是BMP、JPG、PNG、GIF、TIF的图片文件.</para>
	</function>
	<function name="GetFiles">
		<usage>取得文件个数</usage>
		<para>Input控件的ID</para>
		<return>文件数</return>
	</function>
	<function name="GetFilename">
		<usage>取得文件名</usage>
		<para>Input控件的ID</para>
		<para>顺序号，从0开始计数</para>
		<return>全文件名，空串表示顺序号已超出范围</return>
	</function>
	<function name="GetFileType">
		<usage>取得文件的扩展名</usage>
		<para>Input控件的ID</para>
		<para>顺序号，从0开始计数, 或者干脆就是全文件名</para>
		<return>文件名的后缀</return>
	</function>
	<function name="GetFileSize">
		<usage>取得文件的长度</usage>
		<para>Input控件的ID</para>
		<para>顺序号，从0开始计数, 或者干脆就是全文件名</para>
		<return>整数，单位：kb</return>
	</function>
	<function name="GetPictureWidth">
		<usage>取得图片文件的宽度</usage>
		<para>Input控件的ID</para>
		<para>顺序号，从0开始计数, 或者干脆就是全文件名</para>
		<return>整数，单位：像素</return>
	</function>
	<function name="GetPictureHeight">
		<usage>取得图片文件的高度</usage>
		<para>Input控件的ID</para>
		<para>顺序号，从0开始计数, 或者干脆就是全文件名</para>
		<return>整数，单位：像素</return>
	</function>
	<function name="GetFileBase64">
		<usage>取得文件的Base64串, 用于页面自行上传</usage>
		<para>Input控件的ID</para>
		<para>顺序号，从0开始计数, 或者干脆就是全文件名&lt;br&gt;备注：如果参数是全文件名，那么该文件可以是任何本地文件.</para>
		<return>Base64大串</return>
	</function>
	<function name="fptUpload">
		<usage>Ftp方式上传文件</usage>
		<para>Input控件的ID</para>
		<para>格式为：url=[?];uid=[?];pwd=[?];index=[?];isShowProgress=[?];isEcho=[?]; . . . , 其含义如下：&lt;br&gt;
&lt;b&gt;url&lt;/b&gt; - FTP服务器的URL，必须以"ftp://"开头，例如：ftp://www.supcan.cn/WorkPlace/Res&lt;br&gt;
&lt;b&gt;uid&lt;/b&gt; - FTP帐号，可选;&lt;br&gt;
&lt;b&gt;pwd&lt;/b&gt; - 密码，可选;&lt;br&gt;
&lt;b&gt;isShowProgress&lt;/b&gt; - 文件过程中是否显示进度条，可选true/false, 默认是true;&lt;br&gt;
&lt;b&gt;isEcho&lt;/b&gt; - 文件上传成功后是否弹出一个提示对话框，可选true/false, 默认是true;&lt;br&gt;&lt;br&gt;
　　此外，也可以上传独立的本地文件，和对话框中的文件无关：&lt;br&gt;
&lt;b&gt;filename&lt;/b&gt; - 本地文件全文件名，如果要同时上传多个文件，请以Tab("\t")符分隔;&lt;br&gt;
　　甚至也可以上传独立的本地目录，参数如下：&lt;br&gt;
&lt;b&gt;dir&lt;/b&gt; - 本地目录的路径，如果要同时上传多个目录，请以Tab("\t")符分隔;&lt;br&gt;
&lt;b&gt;isCreateServerDir&lt;/b&gt; - 是否在服务器端也建立该目录, true/false, 默认false;&lt;br&gt;
&lt;b&gt;ext&lt;/b&gt; - 需要上传的文件的通配符，比如"*.doc"，默认是"*.*";&lt;br&gt;
&lt;b&gt;isIncludeSubDir&lt;/b&gt; - 是否包含目录下子孙目录的文件, true/false, 默认false;&lt;br&gt;
</para>
		<return>1-成功, 0-失败</return>
		<memo>1.若帐号或密码为星号(*)，那么上传前将会弹出帐号和密码的对话框;&lt;br&gt;
2.上传过程是异步的，所以不应该在本函数后面书写其它上传相关js;
		</memo>
		<illu>参见演示页: 17.文件上传控件</illu>
	</function>
	<function name="httpUpload">
		<usage>以Http PUT方式上传文件</usage>
		<para>Input控件的ID</para>
		<para>格式为：url=[?];uid=[?];pwd=[?];index=[?];isShowProgress=[?];isEcho=[?];filename=[?], 其含义如下：&lt;br&gt;
&lt;b&gt;url&lt;/b&gt; - URL(绝对或相对)，有二种写法:&lt;br&gt;　　一.如/WorkPlace/Res/abc.txt，其中abc.txt是服务器端最终生成文件，常用于单个文件上传；&lt;br&gt;　　二.如/WorkPlace/Res/，即以"/"结尾，服务器将在此目录生成与本地上传文件同名的文件&lt;br&gt;
&lt;b&gt;uid&lt;/b&gt; - 具有Http"写"权限的帐号，可选;&lt;br&gt;
&lt;b&gt;pwd&lt;/b&gt; - 密码，可选;&lt;br&gt;
&lt;b&gt;isShowProgress&lt;/b&gt; - 文件过程中是否显示进度条，可选true/false, 默认是true;&lt;br&gt;
&lt;b&gt;isEcho&lt;/b&gt; - 文件上传成功后是否弹出一个提示对话框，可选true/false, 默认是true;&lt;br&gt;
&lt;b&gt;filename&lt;/b&gt; - 上传独立的本地文件，用于上传和对话框中的文件无关的其它本地文件，可选;&lt;br&gt;
</para>
		<return>1-成功, 0-失败</return>
		<memo>1.若帐号或密码为星号(*)，那么上传前将会弹出帐号和密码的对话框;;&lt;br&gt;
2.上传过程是异步的，所以不应该在本函数后面书写其它上传相关js;
		</memo>
		<illu>参见演示页: 17.文件上传控件</illu>
	</function>
	<function name="httpPost">
		<usage>以Http POST方式将文件内容发给服务器</usage>
		<para>Input控件的ID</para>
		<para>格式为：url=[?];uid=[?];pwd=[?];index=[?];isEcho=[?];filename=[?];mode=[?];PartSize=[?];isShowProgress=[?]..., 其含义如下：&lt;br&gt;
&lt;b&gt;url&lt;/b&gt; - 服务器URL，绝对或相对均可;&lt;br&gt;
&lt;b&gt;uid&lt;/b&gt; - 该URL的Http帐号，可选;&lt;br&gt;
&lt;b&gt;pwd&lt;/b&gt; - 登录名的密码，可选;&lt;br&gt;
&lt;b&gt;isEcho&lt;/b&gt; - 文件上传成功后是否弹出一个提示对话框，可选true/false, 默认是true;&lt;br&gt;
&lt;b&gt;index&lt;/b&gt; - 上传文件的顺序号 (即对话框中的文件的顺序号，从0开始计数);&lt;br&gt;
&lt;b&gt;filename&lt;/b&gt; - 上传独立的本地文件，用于上传和对话框中的文件无关的其它本地文件，可选。如果设置了本参数，前面的 index 参数就可以忽略;&lt;br&gt;
&lt;b&gt;dir&lt;/b&gt; - 将独立的本地目录中的某些文件打包成zip文件上传，和对话框中的文件无关，可选。如果设置了本参数，前面的 index、filenname 参数将无效;&lt;br&gt;
&lt;b&gt;PartSize&lt;/b&gt; - 分块上传，指定的块大小，单位是字节，也可以在数字后面加“K”、"M"表示单位是千字节、兆字节。默认是0，即不分块;&lt;br&gt;
&lt;b&gt;StartPart&lt;/b&gt; - 分块上传，指定从第几块开始上传(从0开始计数)，常用于断点续传。默认是0;&lt;br&gt;
&lt;b&gt;mode&lt;/b&gt; - synch/asynch - 同步/异步，默认是同步;&lt;br&gt;
&lt;b&gt;isShowProgress&lt;/b&gt; - 当分块上传时，在上传过程中是否显示进度条，可选true/false, 默认是true;&lt;br&gt;
&lt;b&gt;Compress&lt;/b&gt; - zip/autozip/空串，是否先压缩成zip再上传，"zip"表示始终采用zip压缩，"autozip"表示如果压缩后尺寸反而更大，则上传原文件，默认是空(即不压缩); 如果文件是压缩后上传的，那么URL中将自动增加 "zip=true" 这样的参数，便于后端识别。如果前面设定了"dir"参数，那么本参数被内置为"Zip". &lt;br&gt;
如果前面选择了 dir 参数，那么还可以选择如下和目录文件有关的内容：&lt;br&gt;
&lt;b&gt;ext&lt;/b&gt; - 文件的通配符，比如"*.doc"，默认是"*.*";&lt;br&gt;
&lt;b&gt;isIncludeSubDir&lt;/b&gt; - 是否包含目录下子孙目录的文件, true/false, 默认false;&lt;br&gt;
</para>
		<memo>1.一次只能上传一个文件，要上传多个文件，必须用js写个循环;&lt;br&gt;
2.参数 index、filename 和 dir 是三种不同用途，所以只能三选一;&lt;br&gt;
3.发送的Http请求中，Http body是文件的二进制内容，Http Header中的Content-Type是application/octet-stream，发送方式是POST&lt;br&gt;
4.文件名可以写在URL的参数中，以便后端获取;&lt;br&gt;
5.如果不采用分块上传，单个文件的长度是有限制的，因为是一次性读取到内存后发送的;&lt;br&gt;
6.如果启用&lt;b&gt;分块上传&lt;/b&gt;，就能够上传大于4G的文件，控件会多次发送http请求，每次发送一段，并且请求的URL中将自动增加诸如:&lt;br&gt; "...?PartSize=65536&amp;Parts=30&amp;Part=0&amp;MD5=e4b69387a56aef304625b2c1809c5a3e"   这样的参数，其中 PartSize表示块的大小, Parts 表示一共有多少块，Part表示当前是第几块(从0开始计数)，MD5是当前数据块的MD5串，用以验证。如果接收数据有误，服务器的 Http StatusCode(状态码)必须不等于200，这样控件会重复发送，最多重复5遍 ;&lt;br&gt;
7.如果是分块上传，每上传一块都会触发 Upload 事件;&lt;br&gt;
</memo>
		<example>//上传对话框中的第一个文件&lt;br&gt;
AF.func("httpPost", "edit1\r\n url=../usercache/savefile.aspx?docname=12.doc; index=0;");&lt;br&gt;
//单独上传和对话框无关的文件&lt;br&gt;
AF.func("httpPost", "edit1\r\n url=../usercache/savefile.aspx?doc=手册.doc&amp;userid=33; filename=c:\\mydoc\\手册.doc; partSize=500K; mode=asynch");
</example>
		<return>1-成功, 0-失败</return>
	</function>
	<function name="CancelUpload">
		<usage>中断上传，仅用于以Http POST方式上传、并且是分块、异步的场合的</usage>
		<para>格式为 Filename=[?];NotifyServer=[?]，含义如下:&lt;br&gt;
&lt;b&gt;NotifyServer&lt;/b&gt; - true/false, 表示是否要通知服务器，要求删除先前上传的内容，默认是false。如果为true, 那么控件将发送一个请求http，其URL中将额外多了一个如下参数:  “Upload=Canceled”，便于服务器判断;&lt;br&gt;
&lt;b&gt;Filename&lt;/b&gt; - 文件名，当同时有多个文件上传时，需要指定中断哪个文件，如果为空，表示中断正在异步上传的所有任务，默认是空;&lt;br&gt;
</para>
	</function>
	<function name="GetHttpPostResponse">
		<usage>取得上次执行HttpPost后的服务器返回串</usage>
		<return>串，服务器的 response</return>
		<memo>1.仅限于同步的httpPost; 如果是分块上传，则返回最后一次的服务器response</memo>
	</function>
	<function name="AddFile">
		<usage>增加一个本地文件</usage>
		<para>Input控件的ID</para>
		<para>全文件名</para>
		<return>1/0 - 成功/失败, 失败原因是文件不存在</return>
	</function>
	<function name="OpenFileDialog">
		<usage>打开文件选择对话框，相当于模拟点击右侧小按钮</usage>
		<para>Input控件的ID</para>
		<return>1/0 - 对话框确认/取消</return>
	</function>
	<function name="Empty">
		<usage>清空选中的文件, 以便再次使用</usage>
		<para>可选，数字，为对话框中的文件的顺序号(从0开始计数)，表示仅仅剔除其中的某个文件，其它不变</para>
		<para>Input控件的ID</para>
	</function>
</category>

<category name="动态菜单按钮&lt;br&gt;的Input控件">
	<function name="PopupMenu">
		<usage>弹出下拉菜单，用于动态菜单按钮</usage>
		<illu>参见演示页: 6.动态更改属性(1)</illu>
	</function>
</category>

<category name="菜单(Menus)资源" for="menus">
	<function name="SetMenu">
		<usage>重构某菜单</usage>
		<para>Menu的ID</para>
		<para>用法1: 菜单XML的URL; &lt;br&gt;用法2: 直接的XML大串; &lt;br&gt;用法3: 以回车(或Tab)分隔的简易文本串，如下所示:&lt;br&gt;　　id=101; text=菜单项1; icon=car0.png; checked=true; &lt;br&gt;　　id=102; text=菜单项2; icon=treelist/cars.zip#car1.png; &lt;br&gt;　　...</para>
		<memo>用法3只能创建单级菜单</memo>
		<illu>参见演示页: 6.动态更改属性(1)</illu>
	</function>
	<function name="DeleteMenuItem">
		<usage>删除某菜单中的某个菜单项</usage>
		<para>Menu的ID</para>
		<para>菜单项的ID，即某个 item 的 id</para>
	</function>
	<function name="GetMenuItemProp">
		<usage>取得某菜单中的某个菜单项的属性</usage>
		<para>Menu的ID</para>
		<para>菜单项的ID，即某个 item 的 id</para>
		<para>属性名，支持 icon(或image)、text、detail、enabled、checked, 或者是其它自定义属性</para>
		<return>属性的内容</return>
	</function>
	<function name="SetMenuItemProp">
		<usage>更改某菜单中的某个菜单项的属性</usage>
		<para>Menu的ID</para>
		<para>菜单项的ID，即某个 item 的 id</para>
		<para>属性名，支持 icon(或image)、text、detail、enabled、checked, 或者是其它自定义属性</para>
		<para>属性的内容</para>
	</function>
</category>

<category name="分页器(Pager)" for="objects.pager">
	<function name="BindPager">
		<usage>分页器和Treelist绑定</usage>
		<para>Treelist的句柄</para>
		<para>Pager的ID</para>
		<illu>参见Treelist的演示页: 16.分页方案(一)</illu>
	</function>
	<function name="Refresh(用途2)">
		<usage>刷新Treelist</usage>
		<detail>刷新Treelist、重新获得总行数</detail>
		<para>Pager的ID</para>
	</function>
</category>

<category name="选项卡(Tab)">
	<function name="GetTabCount">
		<usage>获得选项卡中页签数量</usage>
		<para>选项卡的Id</para>
		<return>数量</return>
		<illu>参见Freeform的演示页: 19.选项卡</illu>
	</function>
	<function name="GetTabIds">
		<usage>获得选项卡中各页签的Id，逗号分隔</usage>
		<para>选项卡的Id</para>
		<return>串</return>
	</function>
	<function name="SetCurSel">
		<usage>切换选项卡当前页签</usage>
		<para>选项卡的Id</para>
		<para>顺序号</para>
		<return>1/0 - 成功/失败</return>
		<illu>参见Freeform的演示页: 19.选项卡</illu>
	</function>
	<function name="GetCurSel">
		<usage>获得选项卡中当前页签的顺序号</usage>
		<para>选项卡的Id</para>
		<return>顺序号</return>
	</function>
	<function name="GetCurSelId">
		<usage>获得选项卡中当前页签的Id</usage>
		<para>选项卡的Id</para>
		<return>Id值</return>
	</function>
	<function name="DeleteTab">
		<usage>删除选项卡中的某个页签</usage>
		<para>选项卡的Id</para>
		<para>页签的Id，或顺序号(从0开始计数)</para>
	</function>
	<function name="InsertTab">
		<usage>插入新页签</usage>
		<para>选项卡的Id</para>
		<para>插入位置</para>
		<para>名值对的串，以分号分隔，名值对含义如下：&lt;br&gt;
&lt;b&gt;id&lt;/b&gt; - 页签的 id 号;&lt;br&gt;
&lt;b&gt;type&lt;/b&gt; - 页签大粒度组件的类型;&lt;br&gt;
&lt;b&gt;text&lt;/b&gt; - 页签上的文字;&lt;br&gt;
&lt;b&gt;createPara&lt;/b&gt; - 大粒度组件的创建参数, 请以引号包绕;&lt;br&gt;
&lt;b&gt;enable&lt;/b&gt; - 页签是否Enable;&lt;br&gt;
&lt;b&gt;visible&lt;/b&gt; - 页签是否可见;&lt;br&gt;
</para>
		<example>AF.func("InsertTab", "Tab1 \r\n 0 \r\n id=kk; type=treelist; text=销售表; createPara='border=none'");</example>
		<illu>参见Freeform的演示页: 19.选项卡</illu>
	</function>
	<function name="GetObjectProp(用途3)">
		<usage>取得选项卡中某页签的属性</usage>
		<para>选项卡的ID和页签的ID，以小数点分隔, 例如 "Tab1.t1"</para>
		<para>属性名，有如下属性:&lt;br&gt;
&lt;b&gt;id&lt;/b&gt; - 页签的 id ;&lt;br&gt;
&lt;b&gt;type&lt;/b&gt; - 页签的大粒度组件的类型 ;&lt;br&gt;
&lt;b&gt;text&lt;/b&gt; - 页签的文字 ;&lt;br&gt;
&lt;b&gt;enable&lt;/b&gt; - 页签是否Enable;&lt;br&gt;
&lt;b&gt;visible&lt;/b&gt; - 页签是否可见;&lt;br&gt;
&lt;b&gt;URL&lt;/b&gt; - 类型为WebBrowser的大粒度组件的URL ;&lt;br&gt;
</para>
		<return>属性的值</return>
	</function>
	<function name="SetObjectProp(用途3)">
		<usage>更改选项卡中某页签的属性</usage>
		<para>选项卡的ID和页签的ID，以小数点分隔, 例如 "Tab1.t1"</para>
		<para>属性名，见上面的GetObjectProp函数，但 id 和 type 是不能被设置的.</para>
		<para>内容</para>
		<return>1/0 - 成功/失败</return>
	</function>

</category>

<category name="提交">
	<function name="Validate">
		<usage>验证</usage>
		<detail>验证输入的内容. 如果未通过验证，将自动浮现出错误提示. 验证包括input的nullAble属性、以及〈Validations〉的内容.</detail>
		<para>可选，可以有：&lt;br&gt;
&lt;b&gt;include&lt;/b&gt; - 其它Freeform的句柄，将它也包含进来. 若有多个句柄, 则以逗号分隔.&lt;br&gt;
		</para>
		<return>1 - 通过验证;&lt;br&gt;0 - 未通过，并自动弹出错误的对话框.</return>
		<example>
var h2 = AForm2.func("GetHandle", "");&lt;br&gt;
var h3 = AForm3.func("GetHandle", "");&lt;br&gt;
AF.func("Validate", "include=" +h2+ "," +h3);&lt;br&gt;
		</example>
		<memo>一般不需要调用这个函数，因为函数GetChangedXML( )本身就包含了验证过程.</memo>
	</function>
	<function name="GetChangedXML">
		<usage>取得用于提交的XML串</usage>
		<detail>调用Validate( )验证，并生成用于提交的XML串</detail>
		<para>可选，可以有：&lt;br&gt;
&lt;b&gt;level&lt;/b&gt; - 级别，有0(默认，取得所有Input的当前内容)、1(只取得修改过的Input的内容、原始内容)、2(取得所有Input的内容、原始内容);&lt;br&gt;
&lt;b&gt;DateFormat&lt;/b&gt; - 日期的格式，默认是'%Y.%m.%d'，可参见&lt;a href="pub.htm#now" target=_blank&gt;公共内容中now( )函数&lt;/a&gt;的参数&lt;br&gt;
&lt;b&gt;DateTimeFormat&lt;/b&gt; - 日期时间的格式，默认是'%Y.%m.%d %H:%M:%S'，可参见&lt;a href="pub.htm#now" target=_blank&gt;公共内容中now( )函数&lt;/a&gt;的参数;&lt;br&gt;
&lt;b&gt;isExecuteValidations&lt;/b&gt; - 是否执行XML描述文件的〈Validations〉中的验证，默认是true.&lt;br&gt;
&lt;b&gt;include&lt;/b&gt; - 其它Freeform的句柄，将它也包含进来. 若有多个句柄, 则以逗号分隔.&lt;br&gt;
&lt;b&gt;includeCol / excludeCol&lt;/b&gt; - 仅包含某些列/不包含某些列，二者可选其一，表示列的&lt;b&gt;范围&lt;/b&gt;. 列名之间以逗号分隔。默认是空串，表示提交所有列;&lt;br&gt;
&lt;b&gt;absIncludeCol&lt;/b&gt; - 始终包含某些列，不管其列数据有没有被修改过. 仅用于Level=1;&lt;br&gt;
		</para>
		<return>正常情况下是一个XML串. 如果串仅为"0"，表示未通过验证，且自动弹出错误的对话框.</return>
		<example>示例一：&lt;br&gt;
AF.func("GetChangedXML", "level=1;dateFormat=%Y-%m-%d;dateTimeFormat=%Y-%m-%d %H:%M:%S");&lt;br&gt;
示例二：&lt;br&gt;
var h2 = AForm2.func("GetHandle", "");&lt;br&gt;
var h3 = AForm3.func("GetHandle", "");&lt;br&gt;
AF.func("GetChangedXML", "level=1; include=" +h2+ "," +h3);&lt;br&gt;
		</example>
		<memo>参与生成XML的Object的条件为：&lt;br&gt;1.可输入的对象(Input)，且ID有效(不为空、不以$开头);&lt;br&gt;2.IsBindingCol=true 的 Text 和 Image 对象，且ID有效(不为空、不以$开头);</memo>
	<illu>参见演示页: 1.感受Freeform、8.有表头表体的表单(1)</illu>
	</function>
	<function name="GetChanged">
		<usage>判断是否被修改过</usage>
		<detail>判断是否被修改过, 也可以写成 IsChanged.</detail>
		<para>有4种写法：&lt;br&gt;
1.空串 - 检查整个Freeform是否被修改过;&lt;br&gt;
2.ID号 - 检查某个ID的输入框是否被修改过;&lt;br&gt;
3.某Radio的GroupID号 - 检查某组Radio框是否被修改过;&lt;br&gt;
4.include=[Feeeform句柄],[Feeeform句柄] - 同时检查其它几个Freeform，逗号分隔。(注：可用GetHandle( )取得句柄)</para>
		<return>1/0 - 是/否</return>
		<example>AF.func("GetChanged", "price"); &lt;br&gt;
var h = AF2.func("GetHandle", ""); &lt;br&gt;
AF1.func("GetChanged", "include=" + h);
		</example>
	</function>
	<function name="ResetChanged">
		<usage>合并修改内容</usage>
		<detail>合并修改内容，清除Input的修改标记.</detail>
	</function>
	<function name="SetAsNewRow">
		<para>可选，true/false - 是/否, 默认true</para>
		<usage>强制设置新增、修改的标识</usage>
		<memo>用于生成GetChangedXML( )函数的XML.&lt;br&gt;注：通过Load( )加载后，就不是新增行了.</memo>
	</function>
	<function name="IsNewRow">
		<usage>是否新增行</usage>
		<return>1/0 - 是/否</return>
		<memo>用于生成GetChangedXML( )函数的XML.&lt;br&gt;注：通过Load( )加载后，就不是新增行了.</memo>
	</function>
</category>

<category name="图片流(ImageFlow)控件" for="objects.imageflow">
	<function name="Locate">
		<usage>将中心位置定位到某幅图</usage>
		<para>id, 或顺序号</para>
		<para>可选，true/false, true表示参数1是id，false表示参数1是顺序号(从0开始计数)，默认是true.</para>
	</function>
	<function name="Scroll">
		<usage>发送一个滚动消息</usage>
		<para>速率, -150至150之间，小于0表示向左滚动.</para>
		<illu>参见演示页: 18.炫酷ImageFlow(图像流)控件</illu>
	</function>
</category>
<category name="其它">
	<function name="AddPath">
		<usage>动态创建Path</usage>
		<para>ID</para>
		<para>XML串</para>
		<illu>参见演示页: 18.炫酷ImageFlow(图像流)控件</illu>
	</function>
	<function name="Export">
		<usage>取得XML格式的数据</usage>
		<detail>取得XML格式的数据，一般用于打印:将串作为数据源转交给Report组件.</detail>
		<para>可选，可以有 content=[?]; include=[?]; metaOnly=[?]; includeHide=[?]; includeEmpty=[?] 这5个子句，含义分别为：&lt;br&gt;
&lt;b&gt;content&lt;/b&gt;: asData表示输出内容是纯数据, asDisplay表示和界面显示的一样串，默认是asDisplay;&lt;br&gt;
&lt;b&gt;include&lt;/b&gt;: 其它freeform的句柄，表示一起参与输出，多个句柄以逗号分隔;&lt;br&gt;
&lt;b&gt;metaOnly&lt;/b&gt;: =true表示不含数据，仅含结构，默认是false&lt;br&gt;
&lt;b&gt;includeHide&lt;/b&gt;: 是否包含隐藏(不可视)的输入对象，默认是true;&lt;br&gt;
&lt;b&gt;includeEmpty&lt;/b&gt;: 是否包含空值，默认是true;&lt;br&gt;
</para>
		<return>XML大串</return>
		<example>var h = AF2.func("GetHandle","");&lt;br&gt;
		AF.func("export", "content=asDisplay; include="+h);</example>
		<memo>返回的串的格式类似于：&lt;br&gt;
〈form id="business1" key="orderId" 自定义属性="?" 〉&lt;br&gt;
　〈row〉&lt;br&gt;
　　〈orderId〉k1020〈/id〉&lt;br&gt;
　　〈dt〉2011.08.01〈/dt〉&lt;br&gt;
　　〈rate〉6.1203〈/rate〉&lt;br&gt;
　　〈checked〉商业保险〈/checked〉&lt;br&gt;
　　〈city〉Charleroi〈/city〉&lt;br&gt;
　〈/row〉&lt;br&gt;
〈/form〉</memo>
		<illu>参见演示页: 9.有表头表体的表单(2)</illu>
	</function>
	<function name="AddHotKey">
		<usage>增设快捷键</usage>
		<detail>增设快捷键。快捷键将触发HotKey事件</detail>
		<para>第一个快捷键，可以是F1至F12、字母、数字、或键的AscII码，也可再加Ctrl、Shift、Alt的组合，以'+'分隔.</para>
		<para>可选，第二个快捷键，以此类推.</para>
		<example>AF.func("AddHotKey", "F12 \r\n Ctrl+F4 \r\n Ctrl+Shift+S \r\n Alt+5 \r\n Ctrl+32");&lt;br&gt;
		分别表示了5个快捷键：F12、Ctrl+F4、Ctrl+Shift+S、Alt+5、Ctrl+空格(空格的AscII码是32)
		</example>
		<memo>并不是所有键都能用作快捷的，受制于浏览器，您需要逐个测试</memo>
	</function>
</category>
</functions>
